# -*- coding: utf-8 -*-
"""ml_devops_integration1.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xd46pEIN7zWHZFSvuoBnvSCh76OsuGsK
"""

import keras
from keras import backend as K

import tensorflow as tf

import numpy as np

from keras.models import Sequential

from keras.layers import Conv2D, MaxPooling2D, Flatten , Dense, Activation,Dropout

from keras.utils import np_utils

from keras.callbacks import callbacks

from sklearn.metrics import accuracy_score

#importing and downloading pre-trained dataset
from keras.datasets import cifar10
(x_train, y_train), (x_test, y_test) = cifar10.load_data()

print("Train samples:", x_train.shape, y_train.shape)
print("Test samples:", x_test.shape, y_test.shape)

#giving class to dataset
NUM_CLASSES = 10
cifar10_classes = ["airplane", "automobile", "bird", "cat", "deer", 
                   "dog", "frog", "horse", "ship", "truck"]

type(x_train)

x_train.dtype

#conerting unit8 to float32 type
X_train = x_train.astype('float32')
X_test = x_test.astype('float32')

#normalizing dataset
X_train = X_train/255
X_test = X_test/255

#one-hot encoding to dataset
Y_train = keras.utils.to_categorical(y_train, NUM_CLASSES)
Y_test = keras.utils.to_categorical(y_test, NUM_CLASSES)

#creating layers of sequential model
input_shape = (32,32,3)
model = Sequential()
model.add(Conv2D(32, (3, 3), padding='same', input_shape = input_shape))
model.add(Activation('relu'))
model.add(Conv2D(32,(3, 3)))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Flatten())
model.add(Dense(512 , activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(10, activation='softmax'))

#compiling model
model.compile(metrics=['accuracy'], optimizer='adam' , loss='categorical_crossentropy')

#giving initial epoch=5 as hyper parameter
epoch = 5

#function callback to get output in one single file
class result1(Callback):
      def on_epoch_end(self, epoch, logs={}):
          
            file='/root/workspace/result1.txt' 
            var=logs.get('accuracy')
            with open(file, 'w') as filetowrite:
                filetowrite.write(np.array2string(var))




callbacks = result1()

final = model.fit(X_train,Y_train, epochs = epoch,callbacks=[callbacks])

model.summary()


